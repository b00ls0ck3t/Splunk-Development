trigger:
- main

pool: 
  name: 'splunk-dev-pool'

parameters:
- name: target_component
  displayName: 'Deploy to Component'
  type: string
  default: 'splunk_dev'
  values:
  - splunk_dev
  - deployment_server
  - all_components

- name: restart_services
  displayName: 'Restart Splunk after deployment'
  type: boolean
  default: true

stages:
- stage: Deploy
  displayName: 'Deploy and Manage Splunk Stack'
  variables:
  - group: Agent-Credentials
  - name: DOCKER_PROJECT_PATH
    value: '/opt/splunk-docker-dev'

  jobs:
  - job: DeployJob
    displayName: 'Deploying to ${{ parameters.target_component }}'
    steps:
    - checkout: self

    - script: |
        echo "Shutting down existing Splunk stack..."
        cd $(DOCKER_PROJECT_PATH)
        docker compose down || echo "No existing stack found. Continuing..."
      displayName: '1. Shutdown Existing Docker Stack'

    - script: |
        echo "Deploying latest docker-compose.yml..."
        cp -f docker-compose.yml $(DOCKER_PROJECT_PATH)/docker-compose.yml
      displayName: '2. Deploy Docker Compose File'

    - script: |
        echo "Launching new Splunk stack..."
        cd $(DOCKER_PROJECT_PATH)
        docker compose up -d
      displayName: '3. Launch New Docker Stack'

    - ${{ if eq(parameters.target_component, 'splunk_dev') }}:
      - script: |
          echo "Deploying Splunk configurations..."
          echo "$(AGENT_SUDO_PASSWORD)" | sudo -S cp -r apps/* $(DOCKER_PROJECT_PATH)/volumes/splunk-etc/apps/
          echo "$(AGENT_SUDO_PASSWORD)" | sudo -S cp indexer-cluster/master-node/indexes.conf $(DOCKER_PROJECT_PATH)/volumes/splunk-etc/system/local/
          echo "$(AGENT_SUDO_PASSWORD)" | sudo -S chown -R 41812:41812 $(DOCKER_PROJECT_PATH)/volumes/splunk-etc/
        displayName: '4. Deploy Splunk Configurations'
        env:
          AGENT_SUDO_PASSWORD: $(AGENT_SUDO_PASSWORD)

    - script: |
        echo "Performing health check on Splunk container..."
        timeout=300
        interval=10
        elapsed=0
        
        while [ $elapsed -lt $timeout ]; do
          status=$(docker ps --filter "name=splunk-dev" --format "{{.Status}}")
          if [[ $status == *" (healthy)"* ]]; then
            echo "Splunk container is healthy."
            echo "Validating deployment..."
            docker exec splunk-dev ls -la /opt/splunk/etc/apps/ | grep custom_logging && echo "custom_logging app deployed" || (echo "custom_logging not found" && exit 1)
            docker exec splunk-dev ls -la /opt/splunk/etc/system/local/ | grep indexes.conf && echo "indexes.conf deployed" || (echo "indexes.conf not found" && exit 1)
            echo "Deployment validation completed successfully."
            exit 0
          fi
          echo "Waiting for Splunk to become healthy... (Status: $status)"
          sleep $interval
          elapsed=$((elapsed + interval))
        done
        
        echo "Timeout reached. Splunk container did not become healthy."
        docker logs splunk-dev
        exit 1
      displayName: '5. Health Check and Validate Deployment'