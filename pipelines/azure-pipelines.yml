trigger:
- main

pool: 
  name: 'splunk-dev-pool'

parameters:
- name: target_component
  displayName: 'Deploy to Component'
  type: string
  default: 'splunk_dev'
  values:
  - splunk_dev
  - deployment_server
  - all_components

- name: restart_services
  displayName: 'Restart Splunk after deployment'
  type: boolean
  default: true

stages:
- stage: Deploy
  displayName: 'Deploy and Manage Splunk Stack'
  variables:
  - group: SPLUNK_VARIABLES
  - name: DOCKER_PROJECT_PATH
    value: '/opt/splunk-docker-dev'

  jobs:
  - job: DeployJob
    displayName: 'Deploying to ${{ parameters.target_component }}'
    steps:
    - checkout: self
      persistCredentials: true

    - ${{ if eq(parameters.restart_services, true) }}:
      - script: |
          set -e
          echo "Shutting down existing Splunk stack..."
          cd $(DOCKER_PROJECT_PATH)
          docker compose down --remove-orphans || echo "No existing stack found. Continuing..."
        displayName: 'Shutdown Docker Stack'

    - script: |
        set -e
        echo "Syncing repository to project directory..."
        cp -R ./* $(DOCKER_PROJECT_PATH)/
        echo "Sync completed successfully"
      displayName: 'Sync Repository'

    - ${{ if eq(parameters.restart_services, true) }}:
      - script: |
          set -e
          echo "Launching new Splunk stack..."
          cd $(DOCKER_PROJECT_PATH)
          docker compose up -d
          echo "Docker stack launched successfully"
        displayName: 'Launch Docker Stack'

    - ${{ if eq(parameters.target_component, 'splunk_dev') }}:
      - script: |
          set -e
          echo "Deploying Splunk (dev) configurations..."
          echo "$(AGENT_SUDO_PASSWORD)" | sudo -S cp -r apps/* $(DOCKER_PROJECT_PATH)/volumes/splunk-etc/apps/
          echo "$(AGENT_SUDO_PASSWORD)" | sudo -S cp indexer-cluster/master-node/indexes.conf $(DOCKER_PROJECT_PATH)/volumes/splunk-etc/system/local/
          echo "$(AGENT_SUDO_PASSWORD)" | sudo -S chown -R 41812:41812 $(DOCKER_PROJECT_PATH)/volumes/splunk-etc/
          echo "Configuration deployment completed"
        displayName: 'Deploy Splunk Dev Config'
        env:
          AGENT_SUDO_PASSWORD: $(AGENT_SUDO_PASSWORD)

    - ${{ if eq(parameters.target_component, 'deployment_server') }}:
      - script: |
          set -e
          echo "Deploying Deployment Server configurations..."
          echo "$(AGENT_SUDO_PASSWORD)" | sudo -S cp -r deployment-server/* $(DOCKER_PROJECT_PATH)/volumes/deployment-server/
          echo "$(AGENT_SUDO_PASSWORD)" | sudo -S chown -R 41812:41812 $(DOCKER_PROJECT_PATH)/volumes/deployment-server/
          echo "Configuration deployment completed"
        displayName: 'Deploy Deployment Server Config'
        env:
          AGENT_SUDO_PASSWORD: $(AGENT_SUDO_PASSWORD)

    - ${{ if eq(parameters.target_component, 'all_components') }}:
      - script: |
          set -e
          echo "Deploying configurations for all components..."
          echo "$(AGENT_SUDO_PASSWORD)" | sudo -S cp -r apps/* $(DOCKER_PROJECT_PATH)/volumes/splunk-etc/apps/
          echo "$(AGENT_SUDO_PASSWORD)" | sudo -S cp indexer-cluster/master-node/indexes.conf $(DOCKER_PROJECT_PATH)/volumes/splunk-etc/system/local/
          echo "$(AGENT_SUDO_PASSWORD)" | sudo -S cp -r deployment-server/* $(DOCKER_PROJECT_PATH)/volumes/deployment-server/ || echo "No deployment server configs found"
          echo "$(AGENT_SUDO_PASSWORD)" | sudo -S chown -R 41812:41812 $(DOCKER_PROJECT_PATH)/volumes/
          echo "Configuration deployment completed"
        displayName: 'Deploy All Component Configs'
        env:
          AGENT_SUDO_PASSWORD: $(AGENT_SUDO_PASSWORD)

    - ${{ if eq(parameters.restart_services, true) }}:
      - script: |
          set -e
          echo "Performing health check on Splunk container..."
          timeout=300
          interval=10
          elapsed=0
          
          while [ $elapsed -lt $timeout ]; do
            status=$(docker ps --filter "name=splunk-dev" --format "{{.Status}}")
            if [[ $status == *" (healthy)"* ]]; then
              echo "Splunk container is healthy."
              echo "Validating deployment..."
              docker exec splunk-dev ls -la /opt/splunk/etc/apps/ | grep custom_logging && echo "✓ custom_logging app deployed" || (echo "✗ custom_logging not found" && exit 1)
              docker exec splunk-dev ls -la /opt/splunk/etc/system/local/ | grep indexes.conf && echo "✓ indexes.conf deployed" || (echo "✗ indexes.conf not found" && exit 1)
              echo "Deployment validation completed successfully."
              exit 0
            fi
            echo "Waiting for Splunk to become healthy... (Status: $status, Elapsed: ${elapsed}s)"
            sleep $interval
            elapsed=$((elapsed + interval))
          done
          
          echo "ERROR: Timeout reached. Splunk container did not become healthy after ${timeout}s"
          echo "Container logs:"
          docker logs splunk-dev
          exit 1
        displayName: 'Health Check and Validate'

    - script: |
        set -e
        echo "Mirroring to GitHub..."
        
        if [ -z "$GITHUB_PAT_TOKEN" ]; then
          echo "ERROR: GITHUB_PAT_TOKEN is not set"
          exit 1
        fi
        
        git config user.email "azure-pipeline@automated.local"
        git config user.name "Azure Pipeline Bot"
        
        COMMIT_SHA=$(git rev-parse HEAD)
        echo "Current commit: $COMMIT_SHA"
        
        git remote remove github 2>/dev/null || true
        git remote add github "https://${GITHUB_PAT_TOKEN}@github.com/b00ls0ck3t/Splunk-Development.git"
        
        echo "Pushing commit $COMMIT_SHA to GitHub main branch..."
        git push github $COMMIT_SHA:refs/heads/main --force
        
        echo "✓ Successfully mirrored to GitHub"
      displayName: 'Mirror to GitHub'
      env:
        GITHUB_PAT_TOKEN: $(GITHUB_PAT_TOKEN)